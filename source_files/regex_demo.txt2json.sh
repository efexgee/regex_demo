#!/bin/bash

# Converts simple RegexDemo input text files to JSON

if (( $# != 1 )); then
    echo "Usage: $0 <text file>" >&2
    exit 1
fi

infile=$1
outfile=${infile/txt/json}

oIFS=$IFS

shopt -s expand_aliases
# turn off glob expansion so to_json won't interpret *
set -f

# make jshon read from /dev/null so it doesn't break 'read'
# by closing the file descriptor; also suppress errors
alias to_json='jshon -Q -F /dev/null -s'
alias read='read -r'

IFS=$'\n'

#output to outfile
exec > $outfile

# start JSON output
echo '{'

# this is a block that gets the input file showed into it
# at the end of the block
{
    # process title
    #echo read title
    read line || echo "read error"
    echo "$(to_json title): $(to_json $line),"

    # process description
    #echo read description
    read line || echo "read error"
    echo "$(to_json description): $(to_json $line),"

    #echo read to gobble line
    read line   # gobble up blank line

    echo "$(to_json comment): $(to_json 'generated by '$0),"

    # process sample text
    echo "$(to_json text): ["

    #echo read first sample line
    read line
    echo -n "$(to_json $line)"

    while read line; do
        if [ -z $line ]; then
            break
        else
            echo ","
            echo -n "$(to_json $line)"
        fi
    done

    echo
    echo "],"

    #read line   # gobble up blank line
    #TODO why don't we need this?

    # process regexes
    echo "$(to_json regexes): ["

    #echo read first regex
    read line
    echo -n "$(to_json $line)"

    while read line; do
        if [[ -z $line ]]; then
            break
        else
            echo ","
            echo -n "$(to_json $line)"
        fi
    done
} < $infile

echo
echo "]"

echo '}'
# end JSON output

IFS=$oIFS
set +f
